import React, { useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

/**
 * Leadership Toolbox – Interactive Board Game (single-file React component)
 * -----------------------------------------------------------------------
 * What this includes
 * - Self-contained component you can drop into any React page.
 * - Minimal ruleset tuned for solo demo or 2–6 players.
 * - Board (30 tiles), dice, turn order, card draw modals, scoring.
 * - Sample deck built from your Learning Opportunity Cards PDF categories.
 * - TailwindCSS classes for styling (works without extra CSS).
 * - Framer Motion for smooth micro-interactions (optional).
 *
 * How to use
 * 1) Ensure Tailwind is available in your app (or replace classes with your CSS).
 * 2) Import and render <LeadershipToolboxGame /> inside your page.
 * 3) Replace SAMPLE_CARDS with your full set (see CARD SHAPE below).
 * 4) (Optional) Plug in real images for tiles or card art.
 *
 * CARD SHAPE
 * {
 *   id: string,
 *   title: string,
 *   category: "Emotional Intelligence" | "Motivation" | "Engagement" | "Technical Skills" | "Job Cost" | "Presentation Skills" | string,
 *   body: string,
 *   effect: { type: "points" | "skill" | "draw" | "move" | "skip"; amount?: number; skillKey?: string; spaces?: number; turns?: number }
 * }
 *
 * SKILL KEYS (built-in)
 *   "activeListening", "empathy", "validation", "selfAwareness", "selfControl",
 *   "relationshipAwareness", "relationshipManagement", "motivation", "engagement",
 *   "technical", "jobCost", "presentation"
 */

const SKILL_LABELS: Record<string, string> = {
  activeListening: "Active Listening",
  empathy: "Empathy",
  validation: "Validation",
  selfAwareness: "Self Awareness",
  selfControl: "Self Control",
  relationshipAwareness: "Relationship Awareness",
  relationshipManagement: "Relationship Management",
  motivation: "Motivation",
  engagement: "Engagement",
  technical: "Technical Skills",
  jobCost: "Job Cost",
  presentation: "Presentation Skills",
};

// --- SAMPLE CARDS (Replace/extend with your real deck) --- //
const SAMPLE_CARDS = [
  {
    id: "c1",
    title: "Active Listening",
    category: "Emotional Intelligence",
    body:
      "Open yourself up to truly hear the other person. Make the speaker the center of your attention.",
    effect: { type: "skill", skillKey: "activeListening", amount: 1 },
  },
  {
    id: "c2",
    title: "Empathy",
    category: "Emotional Intelligence",
    body: "Acknowledge feelings and perspectives. Build trust through understanding.",
    effect: { type: "skill", skillKey: "empathy", amount: 1 },
  },
  {
    id: "c3",
    title: "Validation",
    category: "Emotional Intelligence",
    body: "Name the emotion, validate the experience, and reduce defensiveness.",
    effect: { type: "points", amount: 2 },
  },
  {
    id: "c4",
    title: "Self Control",
    category: "Emotional Intelligence",
    body: "Pause before reacting. Choose the most constructive response.",
    effect: { type: "skill", skillKey: "selfControl", amount: 1 },
  },
  {
    id: "c5",
    title: "Stakeholder Brief",
    category: "Presentation Skills",
    body: "You clearly frame intent and outcomes for your stakeholders.",
    effect: { type: "points", amount: 3 },
  },
  {
    id: "c6",
    title: "Optimize Overtime",
    category: "Job Cost",
    body: "You balance burn rate and deadlines to protect margin.",
    effect: { type: "skill", skillKey: "jobCost", amount: 1 },
  },
  {
    id: "c7",
    title: "Teach Problem-Solving",
    category: "Technical Skills",
    body: "You mentor a teammate to solve issues independently.",
    effect: { type: "skill", skillKey: "technical", amount: 1 },
  },
  {
    id: "c8",
    title: "Draw 2 Cards",
    category: "Learning Boost",
    body: "Curiosity compounds. Draw two additional cards.",
    effect: { type: "draw", amount: 2 },
  },
  {
    id: "c9",
    title: "Momentum",
    category: "Engagement",
    body: "Your team rallies behind a clear goal. Advance 2 spaces.",
    effect: { type: "move", spaces: 2 },
  },
  {
    id: "c10",
    title: "Reflection Day",
    category: "Well-being",
    body: "You create space for reflection. Skip your next turn (but gain +1 Self Awareness).",
    effect: { type: "skip", turns: 1 },
  },
];

// --- BOARD MODEL --- //
const TILE_TYPES = ["START", "LEARN", "CHALLENGE", "EVENT", "REST", "FINISH"] as const;

type TileType = typeof TILE_TYPES[number];

type Tile = { idx: number; type: TileType; label?: string; requirement?: { skillKey: string; threshold: number } };

const buildBoard = (): Tile[] => {
  const tiles: Tile[] = [];
  for (let i = 0; i < 30; i++) {
    let type: TileType = "LEARN";
    if (i === 0) type = "START";
    else if (i === 29) type = "FINISH";
    else if (i % 7 === 0) type = "CHALLENGE";
    else if (i % 5 === 0) type = "EVENT";
    else if (i % 11 === 0) type = "REST";

    const tile: Tile = { idx: i, type };
    if (type === "CHALLENGE") {
      const reqs = [
        { skillKey: "activeListening", threshold: 1 },
        { skillKey: "technical", threshold: 1 },
        { skillKey: "presentation", threshold: 1 },
        { skillKey: "jobCost", threshold: 1 },
        { skillKey: "empathy", threshold: 1 },
      ];
      tile.requirement = reqs[(i / 7) % reqs.length | 0];
      tile.label = `Challenge: ${SKILL_LABELS[tile.requirement.skillKey]}`;
    }
    tiles.push(tile);
  }
  return tiles;
};

// --- HELPERS --- //
const shuffle = <T,>(arr: T[]) => {
  const a = [...arr];
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
};

const rollD6 = () => Math.floor(Math.random() * 6) + 1;

// --- COMPONENT --- //
export default function LeadershipToolboxGame() {
  const board = useMemo(() => buildBoard(), []);
  const [deck, setDeck] = useState(() => shuffle(SAMPLE_CARDS));
  const [discard, setDiscard] = useState<any[]>([]);

  const [players, setPlayers] = useState(() => [
    makePlayer("Player 1", "#ef4444"),
    makePlayer("Player 2", "#3b82f6"),
  ]);
  const [current, setCurrent] = useState(0);
  const [rolled, setRolled] = useState<number | null>(null);
  const [modal, setModal] = useState<React.ReactNode | null>(null);

  const active = players[current];

  function makeTurn() {
    if (active.skipTurns > 0) {
      updatePlayer(current, (p) => ({ ...p, skipTurns: p.skipTurns - 1 }));
      nextTurn();
      return;
    }
    const n = rollD6();
    setRolled(n);
    movePlayer(current, n);
  }

  function drawCard(n = 1) {
    let d = [...deck];
    let drawn: any[] = [];
    for (let i = 0; i < n; i++) {
      if (d.length === 0) d = shuffle(discard);
      const c = d.shift();
      if (!c) break;
      drawn.push(c);
    }
    setDeck(d);
    return drawn;
  }

  function handleTileEffect(tile: Tile) {
    if (tile.type === "LEARN") {
      const [c] = drawCard(1);
      if (c) showCard(c);
      else nextTurn();
    } else if (tile.type === "EVENT") {
      const [c] = drawCard(1);
      if (c) showCard(c);
      else nextTurn();
    } else if (tile.type === "CHALLENGE" && tile.requirement) {
      const { skillKey, threshold } = tile.requirement;
      const ok = (players[current].skills[skillKey] || 0) >= threshold;
      setModal(
        <CardModal
          title={tile.label || "Challenge"}
          category="Challenge"
          body={ok ? `Success! You meet the threshold (${threshold}). +2 points.` : `Missed it. Need ${threshold} in ${SKILL_LABELS[skillKey]}. -1 point.`}
          onClose={() => {
            updatePlayer(current, (p) => ({ ...p, points: p.points + (ok ? 2 : -1) }));
            nextTurn();
          }}
        />
      );
    } else if (tile.type === "REST") {
      setModal(
        <CardModal
          title="Reflection"
          category="Well-being"
          body="Take a breath. +1 Self Awareness."
          onClose={() => {
            bumpSkill(current, "selfAwareness", 1);
            nextTurn();
          }}
        />
      );
    } else if (tile.type === "FINISH") {
      setModal(
        <CardModal
          title="Finish Line"
          category="Milestone"
          body={`${players[current].name} reached the end with ${players[current].points} points!`}
          onClose={() => setModal(null)}
        />
      );
    } else {
      nextTurn();
    }
  }

  function showCard(card: any) {
    setModal(
      <CardModal
        title={card.title}
        category={card.category}
        body={card.body}
        onClose={() => {
          applyEffect(card.effect);
          setDiscard((d) => [card, ...d]);
        }}
      />
    );
  }

  function applyEffect(effect: any) {
    switch (effect?.type) {
      case "points":
        updatePlayer(current, (p) => ({ ...p, points: p.points + (effect.amount || 0) }));
        break;
      case "skill":
        bumpSkill(current, effect.skillKey, effect.amount || 1);
        break;
      case "draw": {
        const cards = drawCard(effect.amount || 1);
        if (cards.length > 0) showCard(cards[0]); else nextTurn();
        return;
      }
      case "move":
        movePlayer(current, effect.spaces || 0);
        return;
      case "skip":
        updatePlayer(current, (p) => ({ ...p, skipTurns: (p.skipTurns || 0) + (effect.turns || 1) }));
        break;
      default:
        break;
    }
    nextTurn();
  }

  function bumpSkill(idx: number, skillKey: string, by = 1) {
    updatePlayer(idx, (p) => ({
      ...p,
      skills: { ...p.skills, [skillKey]: (p.skills[skillKey] || 0) + by },
    }));
  }

  function updatePlayer(idx: number, fn: (p: Player) => Player) {
    setPlayers((ps) => ps.map((p, i) => (i === idx ? fn(p) : p)));
  }

  function movePlayer(idx: number, spaces: number) {
    setPlayers((ps) => {
      const p = ps[idx];
      const pos = Math.min(p.position + spaces, board.length - 1);
      const updated = { ...p, position: pos };
      const next = ps.map((pp, i) => (i === idx ? updated : pp));
      // After state commit, trigger tile effect via temp timeout (ensures position rendered first)
      setTimeout(() => handleTileEffect(board[pos]), 10);
      return next;
    });
  }

  function nextTurn() {
    setRolled(null);
    setModal(null);
    setCurrent((c) => (c + 1) % players.length);
  }

  function addPlayer() {
    const name = prompt("Player name?");
    if (!name) return;
    setPlayers((ps) => [...ps, makePlayer(name, randomColor())]);
  }

  return (
    <div className="w-full max-w-6xl mx-auto p-4">
      <header className="flex items-center justify-between mb-4">
        <h1 className="text-2xl font-bold">Leadership Toolbox – Board Game</h1>
        <div className="flex gap-2">
          <button onClick={addPlayer} className="px-3 py-1 rounded bg-gray-100 hover:bg-gray-200">Add Player</button>
        </div>
      </header>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        {/* BOARD */}
        <div className="lg:col-span-2">
          <Board board={board} players={players} />
        </div>

        {/* SIDEBAR */}
        <aside className="space-y-4">
          <section className="p-4 border rounded">
            <h2 className="font-semibold mb-2">Turn</h2>
            <div className="text-sm text-gray-600">Current:</div>
            <div className="flex items-center gap-2">
              <span className="inline-block w-3 h-3 rounded-full" style={{ background: active.color }} />
              <span className="font-medium">{active.name}</span>
            </div>
            <div className="mt-2 flex items-center gap-2">
              <button
                onClick={makeTurn}
                className="px-3 py-1 rounded bg-black text-white hover:bg-gray-800"
              >
                Roll
              </button>
              {rolled && <span className="text-sm text-gray-700">Rolled: {rolled}</span>}
            </div>
          </section>

          <section className="p-4 border rounded">
            <h2 className="font-semibold mb-2">Players</h2>
            <ul className="space-y-2">
              {players.map((p, i) => (
                <li key={i} className="flex flex-col gap-1">
                  <div className="flex items-center gap-2">
                    <span className="inline-block w-3 h-3 rounded-full" style={{ background: p.color }} />
                    <span className="font-medium">{p.name}</span>
                    <span className="ml-auto text-xs text-gray-500">Pos {p.position}</span>
                  </div>
                  <div className="text-xs text-gray-600">Points: {p.points} {p.skipTurns > 0 && <em>(skip {p.skipTurns})</em>}</div>
                  <div className="flex flex-wrap gap-1 text-[10px] text-gray-700">
                    {Object.entries(p.skills).map(([k, v]) => (
                      <span key={k} className="px-2 py-0.5 rounded bg-gray-100">{SKILL_LABELS[k] || k}: {v}</span>
                    ))}
                  </div>
                </li>
              ))}
            </ul>
          </section>

          <section className="p-4 border rounded text-xs text-gray-600">
            <h2 className="font-semibold text-sm mb-2">How to Win</h2>
            <p>Reach the finish with <strong>15+ points</strong>. Earn points by passing challenges and drawing cards.</p>
          </section>
        </aside>
      </div>

      <AnimatePresence>{modal && <Modal>{modal}</Modal>}</AnimatePresence>
    </div>
  );
}

// --- SUBCOMPONENTS --- //

type Player = {
  name: string;
  color: string;
  position: number;
  points: number;
  skipTurns: number;
  skills: Record<string, number>;
};

function makePlayer(name: string, color: string): Player {
  return {
    name,
    color,
    position: 0,
    points: 0,
    skipTurns: 0,
    skills: { selfAwareness: 0, activeListening: 0, empathy: 0, technical: 0, presentation: 0, jobCost: 0 },
  };
}

function randomColor() {
  const colors = ["#ef4444", "#3b82f6", "#10b981", "#a855f7", "#f59e0b", "#06b6d4"]; return colors[Math.floor(Math.random() * colors.length)];
}

function Board({ board, players }: { board: Tile[]; players: Player[] }) {
  return (
    <div className="grid grid-cols-6 gap-2">
      {board.map((t) => (
        <div key={t.idx} className={`relative border h-20 rounded flex items-center justify-center text-xs text-center ${tileBg(t.type)}`}>
          <div className="absolute top-1 left-1 text-[10px] text-gray-600">{t.idx}</div>
          <div className="px-1">
            <div className="font-medium">{t.type}</div>
            {t.label && <div className="text-[10px] text-gray-600 mt-0.5">{t.label}</div>}
          </div>
          <div className="absolute bottom-1 right-1 flex gap-1">
            {players
              .filter((p) => p.position === t.idx)
              .map((p) => (
                <span key={p.name} className="w-3 h-3 rounded-full border" style={{ background: p.color }} />
              ))}
          </div>
        </div>
      ))}
    </div>
  );
}

function tileBg(type: TileType) {
  switch (type) {
    case "START":
      return "bg-green-50";
    case "FINISH":
      return "bg-amber-50";
    case "CHALLENGE":
      return "bg-red-50";
    case "EVENT":
      return "bg-sky-50";
    case "REST":
      return "bg-purple-50";
    default:
      return "bg-gray-50";
  }
}

function Modal({ children }: { children: React.ReactNode }) {
  return (
    <motion.div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/40"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.div
        className="bg-white rounded-lg shadow-xl w-[92vw] max-w-md p-4"
        initial={{ scale: 0.95, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.95, opacity: 0 }}
      >
        {children}
      </motion.div>
    </motion.div>
  );
}

function CardModal({ title, category, body, onClose }: { title: string; category: string; body: string; onClose: () => void }) {
  return (
    <div>
      <div className="text-xs uppercase tracking-wide text-gray-500">{category}</div>
      <h3 className="text-lg font-semibold">{title}</h3>
      <p className="mt-2 text-sm text-gray-700">{body}</p>
      <div className="mt-4 flex justify-end">
        <button onClick={onClose} className="px-3 py-1 rounded bg-black text-white hover:bg-gray-800">Continue</button>
      </div>
    </div>
  );
}
