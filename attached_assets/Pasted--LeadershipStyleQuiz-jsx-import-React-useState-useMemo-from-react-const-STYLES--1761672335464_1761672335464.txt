// LeadershipStyleQuiz.jsx
import React, { useState, useMemo } from "react";

const STYLES = [
  "Authentic",
  "Servant",
  "Transformational",
  "Transactional",
  "Democratic",
  "Authoritarian",
  "Laissez-Faire",
];

const QUESTIONS = [
  { id: 1, style: "Authentic", text: "I lead by being transparent and consistent, even when itâ€™s uncomfortable." },
  { id: 2, style: "Authentic", text: "My team would describe me as genuine and self-aware." },
  { id: 3, style: "Servant", text: "I focus on removing barriers so my team can perform at their best." },
  { id: 4, style: "Servant", text: "I measure success by how well I develop others, not personal recognition." },
  { id: 5, style: "Transformational", text: "I communicate a vision that motivates others to achieve more than they thought possible." },
  { id: 6, style: "Transformational", text: "I challenge the status quo to drive positive change and innovation." },
  { id: 7, style: "Transactional", text: "I set clear expectations and reward performance according to results." },
  { id: 8, style: "Transactional", text: "I rely on structure, rules, and measurable outcomes to keep projects on track." },
  { id: 9, style: "Democratic", text: "I invite my team to contribute ideas before making major decisions." },
  { id: 10, style: "Democratic", text: "I balance group consensus with timely decision-making." },
  { id: 11, style: "Authoritarian", text: "In times of uncertainty, I prefer to make quick, decisive calls myself." },
  { id: 12, style: "Authoritarian", text: "I value discipline, order, and adherence to established procedures." },
  { id: 13, style: "Laissez-Faire", text: "I trust capable team members to determine their own methods for achieving goals." },
  { id: 14, style: "Laissez-Faire", text: "I prefer to provide minimal oversight and step in only when needed." },
];

const DESCRIPTIONS = {
  Authentic: {
    summary:
      "Authentic leaders are self-aware, transparent, and guided by integrity. You inspire trust by aligning actions with values.",
    strengths: [
      "High trust and credibility",
      "Consistent and values-driven",
      "Empowers open communication",
    ],
  },
  Servant: {
    summary:
      "Servant leaders prioritize the needs of others, focusing on developing their team and fostering growth from the ground up.",
    strengths: [
      "Builds loyalty through empathy",
      "Encourages collaboration",
      "Creates strong, people-centered culture",
    ],
  },
  Transformational: {
    summary:
      "Transformational leaders are visionaries who energize teams around a shared purpose, driving innovation and long-term change.",
    strengths: [
      "Inspires others toward a vision",
      "Encourages innovation",
      "Drives commitment and enthusiasm",
    ],
  },
  Transactional: {
    summary:
      "Transactional leaders thrive on structure, accountability, and measurable results. You ensure clarity and performance through systems.",
    strengths: [
      "Clear expectations and metrics",
      "Strong operational control",
      "Reward-based motivation",
    ],
  },
  Democratic: {
    summary:
      "Democratic leaders value collaboration and shared ownership. You balance diverse input with decisive action.",
    strengths: [
      "High engagement through participation",
      "Empowers team input",
      "Fosters buy-in and creativity",
    ],
  },
  Authoritarian: {
    summary:
      "Authoritarian leaders bring order and decisiveness, especially valuable in crisis or high-risk situations.",
    strengths: [
      "Strong direction and focus",
      "Effective in time-critical decisions",
      "Clear accountability structures",
    ],
  },
  "Laissez-Faire": {
    summary:
      "Laissez-Faire leaders empower independent thinkers and high performers, trusting them to self-direct toward outcomes.",
    strengths: [
      "High autonomy for skilled teams",
      "Encourages innovation through freedom",
      "Supports creative problem-solving",
    ],
  },
};

export default function LeadershipStyleQuiz() {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);

  const handleChange = (qid, value) => {
    setAnswers((prev) => ({ ...prev, [qid]: Number(value) }));
  };

  const totalAnswered = Object.values(answers).filter(Boolean).length;
  const progress = Math.round((totalAnswered / QUESTIONS.length) * 100);

  const results = useMemo(() => {
    if (!submitted) return null;
    const sums = {};
    STYLES.forEach((s) => (sums[s] = 0));
    QUESTIONS.forEach((q) => {
      const val = answers[q.id] || 0;
      sums[q.style] += val;
    });
    const avgs = Object.fromEntries(
      STYLES.map((s) => [s, sums[s] / QUESTIONS.filter((q) => q.style === s).length])
    );
    const topStyle = Object.entries(avgs).sort((a, b) => b[1] - a[1])[0][0];
    const secondary = Object.entries(avgs).sort((a, b) => b[1] - a[1])[1][0];
    return { avgs, topStyle, secondary };
  }, [submitted, answers]);

  function handleSubmit(e) {
    e.preventDefault();
    setSubmitted(true);
  }

  function handleReset() {
    setAnswers({});
    setSubmitted(false);
  }

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-2">Leadership Style Quiz</h1>
      <p className="text-gray-600 mb-6">
        Rate each statement from <strong>1</strong> (Strongly Disagree) to{" "}
        <strong>5</strong> (Strongly Agree). Your responses will reveal your dominant leadership style and key strengths.
      </p>

      {!submitted ? (
        <>
          <div className="mb-4">
            <div className="flex justify-between text-sm mb-1">
              <span>Progress</span>
              <span>{progress}%</span>
            </div>
            <div className="h-2 bg-gray-200 rounded">
              <div
                className="h-2 bg-blue-600 rounded"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {QUESTIONS.map((q, i) => (
              <fieldset key={q.id} className="p-4 border rounded-lg bg-white/50">
                <legend className="font-medium">
                  {i + 1}. {q.text}
                </legend>
                <div className="mt-3 grid grid-cols-5 gap-2 sm:gap-4">
                  {[1, 2, 3, 4, 5].map((v) => (
                    <label
                      key={v}
                      className={`flex flex-col items-center justify-center p-2 border rounded cursor-pointer text-sm ${
                        answers[q.id] === v
                          ? "bg-blue-600 text-white border-blue-600"
                          : "hover:bg-gray-50"
                      }`}
                    >
                      <input
                        type="radio"
                        name={`q-${q.id}`}
                        value={v}
                        className="sr-only"
                        checked={answers[q.id] === v}
                        onChange={(e) => handleChange(q.id, e.target.value)}
                      />
                      <span>{v}</span>
                    </label>
                  ))}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  1 = Strongly Disagree | 5 = Strongly Agree
                </div>
              </fieldset>
            ))}

            <div className="flex gap-3 pt-2">
              <button
                type="submit"
                disabled={totalAnswered < QUESTIONS.length}
                className={`px-4 py-2 rounded text-white ${
                  totalAnswered === QUESTIONS.length
                    ? "bg-blue-600 hover:bg-blue-700"
                    : "bg-gray-400 cursor-not-allowed"
                }`}
              >
                View Results
              </button>
              <button
                type="button"
                onClick={handleReset}
                className="px-4 py-2 border rounded hover:bg-gray-50"
              >
                Reset
              </button>
            </div>
          </form>
        </>
      ) : (
        <ResultsPanel results={results} onReset={handleReset} />
      )}
    </div>
  );
}

function ResultsPanel({ results, onReset }) {
  const { avgs, topStyle, secondary } = results;
  const top = DESCRIPTIONS[topStyle];
  const sec = DESCRIPTIONS[secondary];

  return (
    <section className="space-y-6">
      <div className="p-4 border rounded bg-white/50">
        <h2 className="text-xl font-bold text-blue-700 mb-2">
          Your Leadership Style: {topStyle}
        </h2>
        <p className="text-gray-700 mb-3">{top.summary}</p>
        <h3 className="font-semibold">Key Strengths:</h3>
        <ul className="list-disc list-inside text-gray-700">
          {top.strengths.map((s, i) => (
            <li key={i}>{s}</li>
          ))}
        </ul>
      </div>

      <div className="p-4 border rounded bg-white/50">
        <h3 className="font-semibold text-gray-800">
          Secondary Influence: {secondary}
        </h3>
        <p className="text-gray-600 text-sm">{sec.summary}</p>
      </div>

      <div className="grid md:grid-cols-2 gap-3">
        {Object.entries(avgs).map(([style, score]) => (
          <div key={style} className="p-3 border rounded bg-white/50">
            <div className="flex justify-between font-medium text-sm">
              <span>{style}</span>
              <span>{score.toFixed(2)} / 5</span>
            </div>
            <div className="h-2 bg-gray-200 rounded mt-1">
              <div
                className="h-2 bg-blue-600 rounded"
                style={{ width: `${(score / 5) * 100}%` }}
              />
            </div>
          </div>
        ))}
      </div>

      <button
        onClick={onReset}
        className="px-4 py-2 border rounded hover:bg-gray-50"
      >
        Take Again
      </button>
    </section>
  );
}
